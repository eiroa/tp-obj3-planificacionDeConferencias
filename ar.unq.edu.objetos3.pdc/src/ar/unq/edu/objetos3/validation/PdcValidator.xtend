/*
 * generated by Xtext
 */
package ar.unq.edu.objetos3.validation

import org.eclipse.xtext.validation.Check
import ar.unq.edu.objetos3.pdc.*

//import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class PdcValidator extends AbstractPdcValidator {

  public static val INVALID_NAME = 'invalidName'
	

	@Check
	def checkActivityStartsWithCapital(Actividad actividad) {
		if (!Character.isUpperCase(actividad.titulo.charAt(0))) {
			warning('Title should start with a capital', 
					PdcPackage.Literals.ACTIVIDAD__TITULO,
					INVALID_NAME
					)
		}
	}
	
@Check
def void checkTitleIsUnique(Schedule s) {
	 if  (s.actividades.map[a | a.titulo].toList.length > s.actividades.map[a | a.titulo].toSet.length) {
	 	error('There are repeated titles', 
					PdcPackage.Literals.SCHEDULE__NOMBRE,
					INVALID_NAME)
	 }
	

}

	
	
	@Check
	def checkActivityDurationl(Actividad actividad) {
		
		if (actividad.duracion < 30) {
			error('Duration must be at least 30 minutes', 
					PdcPackage.Literals.ACTIVIDAD__DURACION,
					INVALID_NAME)
		}
	}
	
	
   @Check
	def checkTitleExistance(Actividad actividad) {
		if (actividad.titulo.nullOrEmpty) {
			error('Activity requires a title', 
					PdcPackage.Literals.ACTIVIDAD__DURACION,
					INVALID_NAME)
		}
	}
	
	
	@Check
	def checkConcurrentActivities(PDC pdc) {
		//Genero un mapa con actividades y espacio, si resulta que un espacio tiene dos actividades, hacer algo
		pdc.schedule.actividades.groupBy[a|a.espacio].forEach[p1, p2| 
			if(p2.length >1){
				error('Two Activities at the same place!',PdcPackage.Literals.PDC__SCHEDULE,INVALID_NAME)
			}
		]
	
	}
	
	@Check
	def checkMesaDebate2Oradores(Actividad actividad) {
		if(actividad.esMesaDeDebate && actividad.oradores.length < 2){
			error('Mesa de debate necesita 2 oradores al menos',PdcPackage.Literals.ACTIVIDAD__ORADORES,INVALID_NAME)
		}
	}
	
	@Check
	def checkKeynote(Actividad actividad){
		if(actividad.keynote){
			warning('Keynote detected',PdcPackage.Literals.ACTIVIDAD__KEYNOTE,INVALID_NAME)
		}	
	}
	
	@Check
	def checkDuracionBreak(Actividad actividad){
		if(actividad.esBreak && actividad.duracion < 15 ){
			error('Los breaks no pueden durar menos de 15 minutos',PdcPackage.Literals.ACTIVIDAD__DURACION,INVALID_NAME)
		}	
	}
	
	@Check
	def checkDuracionAlmuerzo(Actividad actividad){
		if(actividad.esBreak && actividad.tipoDeBreak.eClass.name.equals("Almuerzo") && actividad.duracion < 45  ){
			error('Los almuerzos no pueden durar menos de 45 minutos',PdcPackage.Literals.ACTIVIDAD__DURACION,INVALID_NAME)
		}	
	}
	
	@Check
	def checkBreaks(Actividad actividad){
		if( true){
			
		}
	}
	
//	@Check
//	def checkTipoBreaks(TipoDeBreak tipo){
//			println("tipo "+tipo.eClass.name)
//	}
	
	@Check
	def checkAulasConMaquinasSoloParaTalleres(Actividad actividad){
		if( actividad.espacio.tieneComputadoras && !actividad.esTaller){
			error('Un aula con computadoras solo puede utilizarse para talleres',PdcPackage.Literals.ACTIVIDAD__ESPACIO,INVALID_NAME)
		}	
	}
	
	@Check
	def checkActivityCapacity(Actividad actividad) {
		val x = actividad.genteEsperada
		switch (x){
			case null: error("Specify Expected people",
					PdcPackage.Literals.ACTIVIDAD__GENTE_ESPERADA,
					INVALID_NAME)
			case x>actividad.espacio.capacidad: error('There is not enough space', 
					PdcPackage.Literals.ACTIVIDAD__GENTE_ESPERADA,
					INVALID_NAME)
			case x<(actividad.espacio.capacidad / 2) : warning('There is way too much space without being used', 
					PdcPackage.Literals.ACTIVIDAD__GENTE_ESPERADA,
					INVALID_NAME)
			case x>( (90 * actividad.espacio.capacidad) / 100) : warning('Expected people almost exceeds capacity', 
					PdcPackage.Literals.ACTIVIDAD__GENTE_ESPERADA,
					INVALID_NAME)
		}
		
	}
}
